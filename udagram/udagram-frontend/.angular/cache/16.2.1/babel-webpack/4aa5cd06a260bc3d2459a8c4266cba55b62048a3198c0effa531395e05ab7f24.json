{"ast":null,"code":"import _asyncToGenerator from \"D:/Full_Stack_JavaScript/Deploy/nd0067-c4-deployment-process-project-starter/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"D:/Full_Stack_JavaScript/Deploy/nd0067-c4-deployment-process-project-starter/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_HOST = environment.apiHost;\nexport let ApiService = /*#__PURE__*/(() => {\n  var _class;\n  class ApiService {\n    constructor(http) {\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"httpOptions\", {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      });\n      _defineProperty(this, \"token\", void 0);\n      this.http = http;\n    }\n    static handleError(error) {\n      alert(error.message);\n    }\n    static extractData(res) {\n      const body = res;\n      return body || {};\n    }\n    setAuthToken(token) {\n      this.httpOptions.headers = this.httpOptions.headers.append('Authorization', `jwt ${token}`);\n      this.token = token;\n    }\n    get(endpoint) {\n      const url = `${API_HOST}${endpoint}`;\n      const req = this.http.get(url, this.httpOptions).pipe(map(ApiService.extractData));\n      return req.toPromise().catch(e => {\n        ApiService.handleError(e);\n        throw e;\n      });\n    }\n    post(endpoint, data) {\n      const url = `${API_HOST}${endpoint}`;\n      return this.http.post(url, data, this.httpOptions).toPromise().catch(e => {\n        ApiService.handleError(e);\n        throw e;\n      });\n    }\n    upload(endpoint, file, payload) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const signed_url = (yield _this.get(`${endpoint}/signed-url/${file.name}`)).url;\n        const headers = new HttpHeaders({\n          'Content-Type': file.type\n        });\n        const req = new HttpRequest('PUT', signed_url, file, {\n          headers: headers,\n          reportProgress: true // track progress\n        });\n\n        return new Promise(resolve => {\n          _this.http.request(req).subscribe(resp => {\n            if (resp && resp.status && resp.status === 200) {\n              resolve(_this.post(endpoint, payload));\n            }\n          });\n        });\n      })();\n    }\n  }\n  _class = ApiService;\n  _defineProperty(ApiService, \"\\u0275fac\", function ApiService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n  });\n  _defineProperty(ApiService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  }));\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}